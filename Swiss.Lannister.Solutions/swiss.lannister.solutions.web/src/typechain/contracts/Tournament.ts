/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Util {
  export type MatchStruct = {
    white: BigNumberish;
    black: BigNumberish;
    round: BigNumberish;
    result: BigNumberish;
  };

  export type MatchStructOutput = [
    white: bigint,
    black: bigint,
    round: bigint,
    result: bigint
  ] & { white: bigint; black: bigint; round: bigint; result: bigint };

  export type PlayerStruct = {
    name: string;
    id: BigNumberish;
    elo: BigNumberish;
    score: BigNumberish;
    matches: Util.MatchStruct[];
  };

  export type PlayerStructOutput = [
    name: string,
    id: bigint,
    elo: bigint,
    score: bigint,
    matches: Util.MatchStructOutput[]
  ] & {
    name: string;
    id: bigint;
    elo: bigint;
    score: bigint;
    matches: Util.MatchStructOutput[];
  };

  export type TournamentResponseStruct = {
    name: string;
    totalRounds: BigNumberish;
    currentRound: BigNumberish;
    id: AddressLike;
    players: Util.PlayerStruct[];
    status: BigNumberish;
  };

  export type TournamentResponseStructOutput = [
    name: string,
    totalRounds: bigint,
    currentRound: bigint,
    id: string,
    players: Util.PlayerStructOutput[],
    status: bigint
  ] & {
    name: string;
    totalRounds: bigint;
    currentRound: bigint;
    id: string;
    players: Util.PlayerStructOutput[];
    status: bigint;
  };
}

export interface TournamentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPlayer"
      | "beginNextRound"
      | "getTournament"
      | "name"
      | "owner"
      | "pairForCurrentRound"
      | "playerIds"
      | "removePlayer"
      | "renounceOwnership"
      | "roundIds"
      | "scoreMatch"
      | "setRandomNumberForRound"
      | "start"
      | "status"
      | "totalRounds"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "addPlayer",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beginNextRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTournament",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairForCurrentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playerIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePlayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scoreMatch",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRandomNumberForRound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalRounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beginNextRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairForCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playerIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roundIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scoreMatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRandomNumberForRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Tournament extends BaseContract {
  connect(runner?: ContractRunner | null): Tournament;
  waitForDeployment(): Promise<this>;

  interface: TournamentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPlayer: TypedContractMethod<
    [_name: string, _id: BigNumberish, _elo: BigNumberish],
    [void],
    "nonpayable"
  >;

  beginNextRound: TypedContractMethod<[], [void], "nonpayable">;

  getTournament: TypedContractMethod<
    [],
    [Util.TournamentResponseStructOutput],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pairForCurrentRound: TypedContractMethod<[], [void], "nonpayable">;

  playerIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  removePlayer: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  roundIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  scoreMatch: TypedContractMethod<
    [white: BigNumberish, black: BigNumberish, result: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRandomNumberForRound: TypedContractMethod<
    [_random: BigNumberish, _round: BigNumberish],
    [void],
    "nonpayable"
  >;

  start: TypedContractMethod<[], [void], "nonpayable">;

  status: TypedContractMethod<[], [bigint], "view">;

  totalRounds: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPlayer"
  ): TypedContractMethod<
    [_name: string, _id: BigNumberish, _elo: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beginNextRound"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTournament"
  ): TypedContractMethod<[], [Util.TournamentResponseStructOutput], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pairForCurrentRound"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "playerIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "removePlayer"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roundIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "scoreMatch"
  ): TypedContractMethod<
    [white: BigNumberish, black: BigNumberish, result: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRandomNumberForRound"
  ): TypedContractMethod<
    [_random: BigNumberish, _round: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "start"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "status"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRounds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
